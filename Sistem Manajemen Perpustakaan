#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

struct Buku {
    int id;
    string judul, pengarang, kategori;
    int tahun;
    bool tersedia = true;
};

struct Anggota {
    int id;
    string nama;
};

vector<Buku> daftarBuku;
vector<Anggota> daftarAnggota;
queue<int> antrianPinjam;
stack<string> riwayatKembali;
int idBuku = 1, idAnggota = 1;

// ======== FUNGSI CRUD ========
// [ANGGOTA 1]
void tambahBuku() {
    Buku b;
    b.id = idBuku++;
    cout << "Judul: "; cin.ignore(); getline(cin, b.judul);
    cout << "Pengarang: "; getline(cin, b.pengarang);
    cout << "Kategori: "; getline(cin, b.kategori);
    cout << "Tahun terbit: "; cin >> b.tahun;
    daftarBuku.push_back(b);
    cout << "Buku berhasil ditambahkan.\n";
}

void tambahAnggota() {
    Anggota a;
    a.id = idAnggota++;
    cout << "Nama anggota: "; cin.ignore(); getline(cin, a.nama);
    daftarAnggota.push_back(a);
    cout << "Anggota berhasil ditambahkan.\n";
}

void tampilkanBuku() {
    cout << "\nDaftar Buku:\n";
    for (auto& b : daftarBuku)
        cout << "ID: " << b.id << " | " << b.judul << " | " << (b.tersedia ? "Tersedia" : "Dipinjam") << endl;
}

void tampilkanAnggota() {
    cout << "\nDaftar Anggota:\n";
    for (auto& a : daftarAnggota)
        cout << "ID: " << a.id << " | " << a.nama << endl;
}

void ubahBuku() {
    int id;
    cout << "Masukkan ID Buku: "; cin >> id;
    for (auto& b : daftarBuku) {
        if (b.id == id) {
            cout << "Judul baru: "; cin.ignore(); getline(cin, b.judul);
            cout << "Pengarang baru: "; getline(cin, b.pengarang);
            cout << "Kategori baru: "; getline(cin, b.kategori);
            cout << "Tahun terbit baru: "; cin >> b.tahun;
            cout << "Status (1=Tersedia, 0=Dipinjam): "; cin >> b.tersedia;
            cout << "Data buku berhasil diperbarui.\n";
            return;
        }
    }
    cout << "Buku tidak ditemukan.\n";
}

void hapusBuku() {
    int id;
    cout << "Masukkan ID Buku: "; cin >> id;
    daftarBuku.erase(remove_if(daftarBuku.begin(), daftarBuku.end(), [id](Buku b){ return b.id == id; }), daftarBuku.end());
    cout << "Buku berhasil dihapus.\n";
    
void cariBuku() {
    string keyword;
    cout << "Masukkan kata kunci (judul/pengarang/kategori): ";
    cin.ignore(); getline(cin, keyword);
    for (auto& b : daftarBuku) {
        if (b.judul.find(keyword) != string::npos || b.pengarang.find(keyword) != string::npos || b.kategori.find(keyword) != string::npos)
            cout << "ID: " << b.id << " | " << b.judul << endl;
    }
}
void urutkanBukuJudul() {
    sort(daftarBuku.begin(), daftarBuku.end(), [](Buku a, Buku b){ return a.judul < b.judul; });
    cout << "Buku berhasil diurutkan berdasarkan judul.\n";

void menu() {
    int pilihan;
    do {
// menampilkan menu
        cout << "\n=== MANAJEMEN PERPUSTAKAAN ===\n";
        cout << "1. Tambah Buku\n2. Tambah Anggota\n3. Lihat Buku\n4. Lihat Anggota\n";
        cout << "5. Edit Buku\n6. Hapus Buku\n7. Antri Peminjaman\n8. Proses Peminjaman\n";
        cout << "9. Kembalikan Buku\n10. Riwayat Pengembalian\n11. Cari Buku\n12. Urutkan Buku (Judul)\n";
        cout << "0. Keluar\nPilihan: ";
        cin >> pilihan;  // menerima inputan
    // menjalankan fungsi
        switch (pilihan) {
            case 1: tambahBuku(); break;
            case 2: tambahAnggota(); break;
            case 3: tampilkanBuku(); break;
            case 4: tampilkanAnggota(); break;
            case 5: ubahBuku(); break;
            case 6: hapusBuku(); break;
            case 7: antriPinjamBuku(); break;
            case 8: prosesAntrian(); break;
            case 9: kembalikanBuku(); break;
            case 10: lihatRiwayatPengembalian(); break;
            case 11: cariBuku(); break;
            case 12: urutkanBukuJudul(); break;
        }
    } while (pilihan != 0);
}
// memanggil menu 
int main() {
    menu();
    return 0;
}